//=============================================================================
// Functions
//=============================================================================
code
{
	// Find place for village in quadrant
	Vec2 GetVillagePos(int locQuadrant)
	{
		Box2d area = World::GetArea();
		switch(locQuadrant)
		{
		case 0:
			area.v2.x = area.v1.x + area.SizeX() / 2;
			area.v2.y = area.v1.y + area.SizeY() / 2;
			break;
		case 1:
			area.v1.x = area.v1.x + area.SizeX() / 2;
			area.v2.y = area.v1.y + area.SizeY() / 2;
			break;
		case 2:
			area.v2.x = area.v1.x + area.SizeX() / 2;
			area.v1.y = area.v1.y + area.SizeY() / 2;
			break;
		case 3:
			area.v1.x = area.v1.x + area.SizeX() / 2;
			area.v1.y = area.v1.y + area.SizeY() / 2;
			break;
		}
		
		Vec2 pos;
		for(int i=0; i<20; ++i)
		{
			pos = World::FindPlace(area);
			Location@ nearCity = World::GetClosestLocation(L_CITY, pos);
			if(Vec2::Distance(pos, nearCity.pos) > 100.f)
				break;
		}
		
		return pos;
	}
}

//=============================================================================
// Global initializer - not real quest
// 1. set start date
// 2. generate corner dungeon with gladiator armor
// 3. create secret vault
//=============================================================================
quest globalInit
{
	type unique
	flags dontCount
	
	// pre V_0_20
	alias {
		artifactsLoc artifacts_loc
	}

	code {
		Location@ artifactsLoc;
		Location@ vault;

		void Startup()
		{
			World::startDate = Date(631, Rand() % 6, Rand() % 20);
			CreateArtifactLocation();
			CreateVault();
		}

		void CreateArtifactLocation()
		{
			Vec2 bounds = World::bounds;
			for(int i = 0; i < 10; ++i)
			{
				Vec2 pos;
				switch(Rand() % 4)
				{
				case 0:
					pos = Vec2(bounds.x + 16.f, bounds.x + 16.f);
					break;
				case 1:
					pos = Vec2(bounds.y - 16.f, bounds.x + 16.f);
					break;
				case 2:
					pos = Vec2(bounds.x + 16.f, bounds.y - 16.f);
					break;
				case 3:
					pos = Vec2(bounds.y - 16.f, bounds.y - 16.f);
					break;
				}
				if(!World::TryFindPlace(pos, 64.f))
					continue;
				@artifactsLoc = World::CreateLocation(L_DUNGEON, pos, HERO_CRYPT, 2);
				if(artifactsLoc !is null)
					break;
			}
			@artifactsLoc.group = UnitGroup::Get("golems");
			@artifactsLoc.activeQuest = quest;
			artifactsLoc.st = 12;
			artifactsLoc.AddEventHandler(quest, EVENT_ENTER);

			DevInfo(Format("Gladiator armor - {0}.", artifactsLoc.name));
		}

		void CreateVault()
		{
			@vault = World::CreateLocation(L_CAVE, World::GetRandomPlace());
			@vault.activeQuest = quest;
			vault.st = 6;
			vault.AddEventHandler(quest, EVENT_ENTER);

			DevInfo(Format("Vault - {0}.", vault.name));
		}

		void OnEvent(Event@ e)
		{
			if(e.event != EVENT_ENTER)
				return;
			if(Level::location is artifactsLoc)
			{
				if(Level::dungeonLevel == 1)
				{
					e.onEnter.location.RemoveEventHandler(quest);
					Room@ room = Level::GetRoom(ROOM_TREASURY);
					Chest@ chest = Level::GetRandomChest(room);
					chest.AddItem(Item::Get("am_gladiator"));
					Level::SpawnUnit(room, UnitData::Get("golem_adamantine"));
					Level::SpawnUnit(room, UnitData::Get("golem_iron"));
				}
			}
			else if(Level::location is vault)
			{
				e.onEnter.location.RemoveEventHandler(quest);
				BaseObject@ obj = BaseObject::Get("vault_door");
				SpawnPoint point;
				if(Level::FindPlaceNearWall(obj, point))
				{
					Level::SpawnObject(obj, point.pos, point.rot);
					UnitData@ skeleton = UnitData::Get("skeleton");
					for(int i=0; i<3; ++i)
					{
						Unit@ unit = Level::SpawnUnitNearLocation(skeleton, point.pos, 6);
						if(unit !is null)
						{
							if(i == 0)
								unit.AddItem(Item::Get("crypt_note"));
							unit.Kill();
						}
					}
				}
			}
		}

		void SetProgress()
		{
		}

		void OnUpgrade(Vars@ vars)
		{
			@artifactsLoc = World::GetLocation(int(vars["artifactsLoc"]));
			@artifactsLoc.activeQuest = quest;
			if(!bool(vars["done"]))
				artifactsLoc.AddEventHandler(quest, EVENT_ENTER);
		}
	}
}

//=============================================================================
// DELIVER LETTER - random mayor quest
// Go to nearby city with letter and return with response.
//=============================================================================
quest deliverLetter
{
	type mayor
	progress {
		P_LETTER_NONE
		P_LETTER_STARTED
		P_LETTER_TIMEOUT
		P_LETTER_GOT_RESPONSE
		P_LETTER_FINISHED
		P_LETTER_ON_TIMEOUT
	}

	dialog start {
		talk 0
		choice 1
		{
			talk 2
			talk 3
			setQuestProgress P_LETTER_STARTED
			end
		}
		escape choice 4
			end
		showChoices
	}

	dialog target {
		if haveQuestItem
			choice 0
			{
				talk 1
				talk 2
				if questProgress == P_LETTER_ON_TIMEOUT
				{
					talk 3
					setQuestProgress P_LETTER_TIMEOUT
					end
				}
				talk 4
				talk 5
				setQuestProgress P_LETTER_GOT_RESPONSE
				end
			}
		end
	}

	dialog end {
		if questProgress == P_LETTER_ON_TIMEOUT
		{
			doOnce
			talk 0
			setQuestProgress P_LETTER_TIMEOUT
			end
		}
		else if questProgress == P_LETTER_GOT_RESPONSE
			 if haveQuestItem
		{
			choice 1
			{
				talk 2
				talk 3
				talk 4
				setQuestProgress P_LETTER_FINISHED
				end
			}
		}
		end
	}
	
	// pre V_0_20
	alias {
		startLoc start_loc
		endLoc end_loc
	}

	code {
		Location@ startLoc;
		Location@ endLoc;
		Item@ letter;

		void Startup()
		{
			@startLoc = Level::location;
			@endLoc = World::GetRandomSettlement(startLoc);
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_LETTER_STARTED:
				{
					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(30);

					Item@ item = Item::Get("letter");
					@letter = item.QuestCopy(quest, TEXT(3));
					pc.unit.AddTeamItem(letter);

					target.AddDialog(quest, "end");
					endLoc.AddEventHandler(quest, EVENT_ENTER);
				}
				break;
			case P_LETTER_TIMEOUT:
				{
					quest.AddEntry(TEXT(5));
					quest.SetFailed();
					if(Level::location is endLoc)
						pc.unit.RemoveQuestItem(quest);
				}
				break;
			case P_LETTER_GOT_RESPONSE:
				{
					letter.name = TEXT(4);
					quest.AddEntry(TEXT(6));
				}
				break;
			case P_LETTER_FINISHED:
				{
					quest.AddEntry(TEXT(7));
					quest.SetCompleted();

					Team::AddReward(250, 1000);
					pc.unit.RemoveQuestItem(quest);
				}
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_TIMEOUT)
			{
				quest.AddEntry(TEXT(8));
				progress = P_LETTER_ON_TIMEOUT;
			}
			else if(e.event == EVENT_ENTER)
			{
				e.onEnter.location.RemoveEventHandler(quest);
				Unit@ mayor = Level::GetMayor();
				mayor.AddDialog(quest, "target");
			}
		}

		void OnUpgrade(Vars@ vars)
		{
			@startLoc = World::GetLocation(int(vars["startLoc"]));
			@endLoc = World::GetLocation(int(vars["endLoc"]));
			int startTime = int(vars["startTime"]);

			if(quest.state != Q_HIDDEN)
			{
				Item@ item = Item::Get("letter");
				@letter = item.QuestCopy(quest, TEXT(progress >= P_LETTER_GOT_RESPONSE ? 4 : 3));
			}

			if(quest.state != Q_STARTED)
				return;

			int days = 30 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_LETTER_STARTED)
				progress = P_LETTER_ON_TIMEOUT;

			if(endLoc.visited)
			{
				Unit@ mayor = endLoc.GetMayor();
				mayor.AddDialog(quest, "target");
			}
			else
				endLoc.AddEventHandler(quest, EVENT_ENTER);

			Unit@ mayor = startLoc.GetMayor();
			mayor.AddDialog(quest, "end");
		}
	}
}

//=============================================================================
// DELIVER RESOURCES - random mayor quest
// Deliver reources from one city to another. Bandits attack in middle or in
// destination.
//=============================================================================
quest deliverResources
{
	type mayor
	progress {
		P_DELIVER_NONE
		P_DELIVER_STARTED
		P_DELIVER_ENCOUNTER
		P_DELIVER_TALKED
		P_DELIVER_TIMEOUT
		P_DELIVER_FINISHED
	}

	dialog start {
		talk 0
		talk 1
		choice 2
		{
			setQuestProgress P_DELIVER_STARTED
			talk 4
			end
		}
		escape choice 3
			end
		showChoices
	}

	dialog end {
		if questProgress == P_DELIVER_STARTED
		{
			doOnce
			talk 2
			if not haveQuestItem
				talk 3
			setQuestProgress P_DELIVER_TALKED
		}
		if haveQuestItem
			choice 0
			{
				setQuestProgress P_DELIVER_FINISHED
				talk 1
				end
			}
		end
	}

	dialog bandits_enc {
		talk 0
		script "target.OrderAttack()"
		end
	}

	dialog bandits {
		talk 0
		script "target.OrderAttack()"
		end2
	}
	
	// pre V_0_20
	alias {
		startLoc start_loc
		targetLoc target_loc
	}

	code {
		Location@ startLoc;
		Location@ targetLoc;

		void Startup()
		{
			@startLoc = Level::location;
			@targetLoc = GetTargetLocation();
			@targetLoc.activeQuest = quest;
		}

		// get random village that is between 8 or 14 days of travel
		// or farest if not available
		Location@ GetTargetLocation()
		{
			uint count = World::GetSettlements();
			uint index = Rand() % count;
			uint startIndex = index;
			int bestIndex = -1;
			float bestDist = 0;
			while(true)
			{
				Location@ loc = World::GetLocation(index);
				if(loc.IsVillage() && loc !is startLoc && loc.activeQuest is null)
				{
					float dist = Vec2::Distance(startLoc.pos, loc.pos);
					float days = World::GetTravelDays(dist);
					if(days >= 8 && days < 14)
						return loc;
					if(days < 10 && (bestIndex == -1 || bestDist < dist))
					{
						bestIndex = index;
						bestDist = dist;
					}
				}
				index = (index + 1) % count;
				if(index == startIndex)
					break;
			}
			return World::GetLocation(bestIndex);
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_DELIVER_STARTED:
				{
					Item@ item = Item::Get("q_resources");
					@item = item.QuestCopy(quest, TEXT(0));
					pc.unit.AddTeamItem(item);
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
					quest.SetStarted(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.AddEntry(TEXT(3));
					quest.SetTimeout(15);
					if(Rand() % 4 != 0)
					{
						Encounter@ enc = World::AddEncounter(quest);
						enc.pos = (startLoc.pos + targetLoc.pos) / 2;
						enc.dontAttack = true;
						enc.text = TEXT(6);
						@enc.group = UnitGroup::Get("bandits");
						@enc.dialog = quest.GetDialog("bandits_enc");
						@enc.quest = quest;
						enc.st = 8;
					}
				}
				break;
			case P_DELIVER_TALKED:
				target.dontAttack = false;
				break;
			case P_DELIVER_FINISHED:
				quest.AddEntry(TEXT(4));
				quest.SetCompleted();
				Team::AddReward(1500, 4500);
				pc.unit.RemoveQuestItem(quest);
				@targetLoc.activeQuest = null;
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				e.onEnter.location.RemoveEventHandler(quest);
				Unit@ mayor = Level::GetMayor();
				mayor.AddDialog(quest, "end");
				if(progress != P_DELIVER_ENCOUNTER)
				{
					World::RemoveEncounter(quest);
					mayor.dontAttack = true;
					SpawnGroup group;
					group.Fill(UnitGroup::Get("bandits"), 2, 8);
					bool first = true;
					for(uint i=0; i<group.count; ++i)
					{
						Unit@ unit = Level::SpawnUnit(mayor.locPart, group.Get(i));
						if(unit !is null)
						{
							unit.dontAttack = true;
							if(first)
							{
								first = false;
								unit.OrderAutoTalk();
								unit.AddDialog(quest, "bandits");
							}
						}
					}
				}
			}
			else if(e.event == EVENT_TIMEOUT)
			{
				quest.AddEntry(TEXT(5));
				quest.SetFailed();
				progress = P_DELIVER_TIMEOUT;
				@targetLoc.activeQuest = null;
			}
			else if(e.event == EVENT_ENCOUNTER)
			{
				quest.AddEntry(TEXT(7));
				progress = P_DELIVER_ENCOUNTER;
			}
		}
	}
}

//=============================================================================
// BANDITS COLLECT TOLL - random captain quest
// Encounter bandits on road and kill them.
//=============================================================================
quest banditsCollectToll
{
	type captain
	progress {
		P_TOLL_NONE
		P_TOLL_STARTED
		P_TOLL_TIMEOUT
		P_TOLL_KILLED_BANDITS
		P_TOLL_FINISHED
		P_TOLL_ON_TIMEOUT
	}

	dialog start {
		talk 0
		talk 1
		choice 2
		{
			setQuestProgress P_TOLL_STARTED
			talk 3
			talk 4
			end
		}
		escape choice 5
			end
		showChoices
	}

	dialog end {
		if questProgress == P_TOLL_ON_TIMEOUT
		{
			doOnce
			setQuestProgress P_TOLL_TIMEOUT
			talk 0
			talk 1
			end
		}
		else if questProgress == P_TOLL_KILLED_BANDITS
		{
			doOnce
			setQuestProgress P_TOLL_FINISHED
			talk 2
			talk 3
			end
		}
		end
	}

	dialog encounter {
		talk 0
		talk 1
		choice 2
		{
			if script "pc.unit.gold >= 500"
			{
				talk 3
				script "pc.unit.gold -= 500; target.gold += 500;"
				end2
			}
			else
			{
				talk 4
				talk 5
				script "target.OrderAttack()"
				end2
			}
		}
		choice 6
		{
			talk 7
			script "target.OrderAttack()"
			end2
		}
		showChoices
	}
	
	// pre V_0_20
	alias {
		startLoc start_loc
		otherLoc other_loc
	}
	
	code {
		Location@ startLoc;
		Location@ otherLoc;

		void Startup()
		{
			@startLoc = Level::location;
			@otherLoc = World::GetRandomSettlement(startLoc);
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_TOLL_STARTED:
				{
					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(15);

					Encounter@ enc = World::AddEncounter(quest);
					enc.pos = (startLoc.pos + otherLoc.pos) / 2;
					enc.dontAttack = true;
					enc.text = TEXT(3);
					@enc.group = UnitGroup::Get("bandits");
					@enc.dialog = quest.GetDialog("encounter");
					@enc.quest = quest;
					enc.st = 6;
					enc.chance = 50;

					target.AddDialog(quest, "end");
				}
				break;
			case P_TOLL_ON_TIMEOUT:
				quest.AddEntry(TEXT(8));
				break;
			case P_TOLL_TIMEOUT:
				quest.AddEntry(TEXT(4));
				quest.SetFailed();
				break;
			case P_TOLL_KILLED_BANDITS:
				quest.AddEntry(TEXT(5));
				break;
			case P_TOLL_FINISHED:
				quest.AddEntry(TEXT(6));
				quest.SetCompleted();
				Team::AddReward(1500, 4500);
				World::AddNews(TEXT(7));
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_TIMEOUT)
			{
				if(progress != P_TOLL_KILLED_BANDITS)
					progress = P_TOLL_ON_TIMEOUT;
			}
			else if(e.event == EVENT_ENCOUNTER)
				Level::location.AddEventHandler(quest, EVENT_CLEARED);
			else if(e.event == EVENT_CLEARED)
				progress = P_TOLL_KILLED_BANDITS;
		}

		void OnUpgrade(Vars@ vars)
		{
			@startLoc = World::GetLocation(int(vars["startLoc"]));
			@otherLoc = World::GetLocation(int(vars["otherLoc"]));
			int startTime = int(vars["startTime"]);
			int encIndex = int(vars["enc"]);
			bool inEnc = bool(vars["inEnc"]);

			if(quest.state != Q_STARTED)
				return;

			int days = 15 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_TOLL_STARTED)
				progress = P_TOLL_ON_TIMEOUT;

			if(encIndex != -1)
			{
				Encounter@ enc = World::RecreateEncounter(quest, encIndex);
				enc.pos = (startLoc.pos + otherLoc.pos) / 2;
				enc.dontAttack = true;
				enc.text = TEXT(3);
				@enc.group = UnitGroup::Get("bandits");
				@enc.dialog = quest.GetDialog("encounter");
				@enc.quest = quest;
				enc.st = 6;
				enc.chance = 50;
			}

			if(inEnc)
				Level::location.AddEventHandler(quest, EVENT_CLEARED);

			startLoc.GetCaptain().AddDialog(quest, "end");
		}
	}
}

//=============================================================================
// CAMP NEAR CITY - random captain quest
// Bandits have camp near city, need to clean it up.
//=============================================================================
quest campNearCity
{
	type captain
	progress {
		P_CAMP_NONE
		P_CAMP_STARTED
		P_CAMP_CLEARED
		P_CAMP_FINISHED
		P_CAMP_TIMEOUT
		P_CAMP_ON_TIMEOUT
	}

	dialog start {
		talk 0
		talk 1
		talk 2
		choice 3
		{
			setQuestProgress P_CAMP_STARTED
			talk 4
			talk 5
			end
		}
		escape choice 6
			end
		showChoices
	}

	dialog end {
		if questProgress == P_CAMP_CLEARED
		{
			doOnce
			setQuestProgress P_CAMP_FINISHED
			talk 0
			talk 1
		}
		else if questProgress == P_CAMP_ON_TIMEOUT
		{
			doOnce
			setQuestProgress P_CAMP_TIMEOUT
			talk 2
			talk 3
		}
		end
	}
	
	// pre V_0_20
	alias {
		startLoc start_loc
	}
	
	code {
		Location@ startLoc;
		Location@ camp;
		UnitGroup@ group;
		int st;

		void Startup()
		{
			@startLoc = Level::location;
			switch(Rand() % 3)
			{
			case 0:
				@group = UnitGroup::Get("bandits");
				break;
			case 1:
				@group = UnitGroup::Get("goblins");
				break;
			case 2:
				@group = UnitGroup::Get("orcs");
				break;
			}
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_CAMP_STARTED:
				{
					@camp = World::CreateCamp(World::FindPlace(startLoc.pos, 64.f, false), group);
					@camp.activeQuest = quest;
					camp.SetKnown();
					camp.st += Random(3, 5);
					camp.AddEventHandler(quest, EVENT_CLEARED);
					st = camp.st;

					target.AddDialog(quest, "end");

					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(30);
				}
				break;
			case P_CAMP_CLEARED:
				quest.AddEntry(TEXT(3));
				camp.RemoveEventHandler(quest);
				@camp.activeQuest = null;
				break;
			case P_CAMP_FINISHED:
				{
					quest.AddEntry(TEXT(4));
					quest.SetCompleted();
					int reward = GetReward();
					Team::AddReward(reward, reward * 3);
				}
				break;
			case P_CAMP_ON_TIMEOUT:
				quest.AddEntry(TEXT(5));
				World::AbadonLocation(camp);
				camp.RemoveEventHandler(quest);
				@camp.activeQuest = null;
				break;
			case P_CAMP_TIMEOUT:
				quest.AddEntry(TEXT(6));
				quest.SetFailed();
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_CLEARED)
				progress = P_CAMP_CLEARED;
			else if(e.event == EVENT_TIMEOUT)
			{
				if(progress == P_CAMP_STARTED)
					progress = P_CAMP_ON_TIMEOUT;
			}
		}

		int GetReward()
		{
			return Quest::CalculateReward(st, Int2(5, 15), Int2(2500, 5000));
		}

		void OnUpgrade(Vars@ vars)
		{
			@startLoc = vars["startLoc"];
			@camp = vars["targetLoc"];
			int startTime = vars["startTime"];
			@group = vars["group"];
			st = vars["st"];

			if(quest.state != Q_STARTED)
				return;

			startLoc.GetCaptain().AddDialog(quest, "end");

			int days = 30 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_CAMP_STARTED)
				progress = P_CAMP_ON_TIMEOUT;

			if(progress == P_CAMP_STARTED)
			{
				@camp.activeQuest = quest;
				camp.AddEventHandler(quest, EVENT_CLEARED);
			}
		}
	}
}

//=============================================================================
// KILL ANIMALS - random captain quest
// Go to forest/cave and kill all animals.
//=============================================================================
quest killAnimals
{
	type captain
	progress {
		P_KILLANI_NONE
		P_KILLANI_STARTED
		P_KILLANI_CLEARED
		P_KILLANI_FINISHED
		P_KILLANI_TIMEOUT
		P_KILLANI_ON_TIMEOUT
	}
	
	dialog start
	{
		talk 0
		talk 1
		choice 2
		{
			setQuestProgress P_KILLANI_STARTED
			talk 3
			talk 4
			end
		}
		escape choice 5
			end
		showChoices
	}

	dialog captain
	{
		if questProgress == P_KILLANI_CLEARED
		{
			doOnce
			setQuestProgress P_KILLANI_FINISHED
			talk 0
			talk 1
		}
		else if questProgress == P_KILLANI_ON_TIMEOUT
		{
			doOnce
			setQuestProgress P_KILLANI_TIMEOUT
			talk 2
		}
		end
	}
	
	code {
		Location@ startLoc;
		Location@ targetLoc;
		int st;

		void Startup()
		{
			@startLoc = Level::location;
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_KILLANI_STARTED:
				{
					if(Rand() % 2 == 0)
						@targetLoc = World::GetClosestLocation(L_CAVE, startLoc.pos);
					else
						@targetLoc = World::GetClosestLocation(L_OUTSIDE, startLoc.pos, { FOREST, HILLS });
					@targetLoc.activeQuest = quest;
					targetLoc.SetKnown();
					targetLoc.AddEventHandler(quest, EVENT_CLEARED);
					targetLoc.reset = true;
					if(targetLoc.st < 5)
						targetLoc.st = 5;
					st = targetLoc.st;
					
					target.AddDialog(quest, "captain");

					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(30);
				}
				break;
			case P_KILLANI_CLEARED:
				targetLoc.RemoveEventHandler(quest);
				@targetLoc.activeQuest = null;
				quest.AddEntry(TEXT(3));
				break;
			case P_KILLANI_FINISHED:
				{
					int reward = GetReward();
					Team::AddReward(reward, reward * 3);
					quest.AddEntry(TEXT(4));
					quest.SetCompleted();
				}
				break;
			case P_KILLANI_ON_TIMEOUT:
				quest.AddEntry(TEXT(5));
				targetLoc.RemoveEventHandler(quest);
				@targetLoc.activeQuest = null;
				break;
			case P_KILLANI_TIMEOUT:
				quest.AddEntry(TEXT(6));
				quest.SetFailed();
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_CLEARED)
				progress = P_KILLANI_CLEARED;
			else if(e.event == EVENT_TIMEOUT)
			{
				if(progress == P_KILLANI_STARTED)
					progress = P_KILLANI_ON_TIMEOUT;
			}
		}

		int GetReward()
		{
			return Quest::CalculateReward(st, Int2(5, 10), Int2(2500, 4000));
		}

		void OnUpgrade(Vars@ vars)
		{
			@startLoc = vars["startLoc"];
			@targetLoc = vars["targetLoc"];
			int startTime = vars["startTime"];
			st = vars["st"];

			if(quest.state != Q_STARTED)
				return;

			startLoc.GetCaptain().AddDialog(quest, "captain");

			int days = 30 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_KILLANI_STARTED)
				progress = P_KILLANI_ON_TIMEOUT;

			if(progress == P_KILLANI_STARTED)
			{
				@targetLoc.activeQuest = quest;
				targetLoc.AddEventHandler(quest, EVENT_CLEARED);
			}
		}
	}
}

//=============================================================================
// FIND ARTIFACT - random traveler quest
// Go to crypt and recover artifact from treasure.
//=============================================================================
quest findArtifact
{
	type random
	progress {
		P_FINDART_NONE
		P_FINDART_STARTED
		P_FINDART_FINISHED
		P_FINDART_TIMEOUT
		P_FINDART_ON_TIMEOUT
	}

	dialog start
	{
		talk 0
		talk 1
		choice 2
		{
			setQuestProgress P_FINDART_STARTED
			talk 3
			talk 4
			end
		}
		escape choice 5
			end
		showChoices
	}

	dialog end
	{
		if haveQuestItem
		{
			choice 0
			{
				setQuestProgress P_FINDART_FINISHED
				talk 1
				end2
			}
		}
		else if questProgress == P_FINDART_ON_TIMEOUT
		{
			setQuestProgress P_FINDART_TIMEOUT
			talk 2
			talk 3
			talk 4
			end2
		}
		end
	}
	
	// pre V_0_20
	alias {
		startLoc start_loc
		targetLoc target_loc
	}
	
	code
	{
		Location@ startLoc;
		Location@ targetLoc;
		Item@ item;
		int st;
		bool spawned;

		void Startup()
		{
			@startLoc = Level::location;
			@item = ItemList::GetRandomItem("artifacts");
			spawned = false;
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_FINDART_STARTED:
				{
					@item = item.QuestCopy(quest);

					if(Rand() % 4 == 0)
						@targetLoc = World::GetClosestLocation(L_DUNGEON, World::pos, LABYRINTH);
					else
						@targetLoc = World::GetClosestLocation(L_DUNGEON, World::pos, { HERO_CRYPT, MONSTER_CRYPT });
					targetLoc.SetKnown();
					@targetLoc.activeQuest = quest;
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
					st = targetLoc.st;

					target.AddDialog(quest, "end");
					target.temporary = false;

					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(60);
				}
				break;
			case P_FINDART_FINISHED:
				{
					int reward = GetReward();
					Team::AddReward(reward, reward * 3);

					target.AddItem(item);
					pc.unit.RemoveItem(item);
					target.temporary = true;

					if(targetLoc.activeQuest is quest)
						@targetLoc.activeQuest = null;

					quest.AddEntry(TEXT(3));
					quest.SetCompleted();
				}
				break;
			case P_FINDART_TIMEOUT:
				{
					target.temporary = true;

					if(targetLoc.activeQuest is quest)
						@targetLoc.activeQuest = null;

					quest.AddEntry(TEXT(4));
					quest.SetFailed();
				}
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				if(Level::dungeonLevel == targetLoc.levels - 1)
				{
					e.onEnter.location.RemoveEventHandler(quest);
					Chest@ chest = Level::GetTreasureChest();
					chest.AddItem(item);
					spawned = true;
				}
			}
			else if(e.event == EVENT_TIMEOUT)
			{
				if(spawned)
					targetLoc.GetLocationPart(targetLoc.levels - 1).RemoveItemFromChest(item);
				else
					targetLoc.RemoveEventHandler(quest);
				@targetLoc.activeQuest = null;
				quest.AddEntry(TEXT(5));
				progress = P_FINDART_ON_TIMEOUT;
			}
		}

		int GetReward()
		{
			return Quest::CalculateReward(st, Int2(5, 15), Int2(2000, 6000));
		}

		void OnUpgrade(Vars@ vars)
		{
			@item = vars["item"];
			@startLoc = vars["startLoc"];
			@targetLoc = vars["targetLoc"];
			int startTime = vars["startTime"];
			st = vars["st"];
			spawned = vars["done"];

			if(progress != P_FINDART_NONE)
				@item = item.QuestCopy(quest);

			if(quest.state != Q_STARTED)
				return;

			startLoc.FindQuestUnit(quest).AddDialog(quest, "end");

			int days = 60 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_FINDART_STARTED)
				progress = P_FINDART_ON_TIMEOUT;

			if(progress == P_FINDART_STARTED)
			{
				if(!spawned)
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
				@targetLoc.activeQuest = quest;
			}
		}
	}
}

//=============================================================================
// LOST ARTIFACT - random traveler quest
// Traveler found artifact but lost it inside dungeon. Need to recover it from ground.
//=============================================================================
quest lostArtifact
{
	type random
	progress {
		P_LOSTART_NONE
		P_LOSTART_STARTED
		P_LOSTART_FINISHED
		P_LOSTART_TIMEOUT
		P_LOSTART_ON_TIMEOUT
	}

	dialog start
	{
		talk 0
		talk 1
		choice 2
		{
			setQuestProgress P_LOSTART_STARTED
			talk 3
			talk 4
			end
		}
		escape choice 5
			end
		showChoices
	}

	dialog end
	{
		if haveQuestItem
		{
			choice 0
			{
				setQuestProgress P_LOSTART_FINISHED
				talk 1
				end2
			}
		}
		else if questProgress == P_LOSTART_ON_TIMEOUT
		{
			setQuestProgress P_LOSTART_TIMEOUT
			talk 2
			talk 3
			talk 4
			end2
		}
		end
	}

	code
	{
		Location@ startLoc;
		Location@ targetLoc;
		Item@ item;
		int st, atLevel;
		bool spawned;

		void Startup()
		{
			@startLoc = Level::location;
			@item = ItemList::GetRandomItem("artifacts");
			spawned = false;
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_LOSTART_STARTED:
				{
					@item = item.QuestCopy(quest);

					if(Rand() % 2 == 0)
						@targetLoc = World::GetClosestLocation(L_DUNGEON, World::pos, LABYRINTH, F_EXCLUDED);
					else
						@targetLoc = World::GetClosestLocation(L_DUNGEON, World::pos, { HERO_CRYPT, MONSTER_CRYPT });
					targetLoc.SetKnown();
					@targetLoc.activeQuest = quest;
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
					st = targetLoc.st;
					atLevel = targetLoc.GetRandomLevel();

					target.AddDialog(quest, "end");
					target.temporary = false;

					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(60);
				}
				break;
			case P_LOSTART_FINISHED:
				{
					int reward = GetReward();
					Team::AddReward(reward, reward * 3);

					target.AddItem(item);
					pc.unit.RemoveItem(item);
					target.temporary = true;

					if(targetLoc.activeQuest is quest)
						@targetLoc.activeQuest = null;

					quest.AddEntry(TEXT(3));
					quest.SetCompleted();
				}
				break;
			case P_LOSTART_TIMEOUT:
				{
					target.temporary = true;

					if(targetLoc.activeQuest is quest)
						@targetLoc.activeQuest = null;

					quest.AddEntry(TEXT(4));
					quest.SetFailed();
				}
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				if(Level::dungeonLevel == atLevel)
				{
					e.onEnter.location.RemoveEventHandler(quest);
					Level::SpawnItemInsideAnyRoom(item);
					spawned = true;
				}
			}
			else if(e.event == EVENT_TIMEOUT)
			{
				if(spawned)
					targetLoc.GetLocationPart(atLevel).RemoveGroundItem(item);
				else
					targetLoc.RemoveEventHandler(quest);
				@targetLoc.activeQuest = null;
				quest.AddEntry(TEXT(5));
				progress = P_LOSTART_ON_TIMEOUT;
			}
		}

		int GetReward()
		{
			return Quest::CalculateReward(st, Int2(5, 15), Int2(2000, 6000));
		}

		void OnUpgrade(Vars@ vars)
		{
			@item = vars["item"];
			@startLoc = vars["startLoc"];
			@targetLoc = vars["targetLoc"];
			int startTime = vars["startTime"];
			st = vars["st"];
			spawned = vars["done"];
			atLevel = vars["atLevel"];

			if(progress != P_LOSTART_NONE)
				@item = item.QuestCopy(quest);

			if(quest.state != Q_STARTED)
				return;

			startLoc.FindQuestUnit(quest).AddDialog(quest, "end");

			int days = 60 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_LOSTART_STARTED)
				progress = P_LOSTART_ON_TIMEOUT;

			if(progress == P_LOSTART_STARTED)
			{
				if(!spawned)
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
				@targetLoc.activeQuest = quest;
			}
		}
	}
}

//=============================================================================
// STOLEN ARTIFACT - random traveler quest
// Random artifact was stolen, stronger enemy in dungeon/camp have it
//=============================================================================
quest stolenArtifact
{
	type random
	progress {
		P_STOLENART_NONE
		P_STOLENART_STARTED
		P_STOLENART_FINISHED
		P_STOLENART_TIMEOUT
		P_STOLENART_ON_TIMEOUT
	}

	dialog start
	{
		talk 0
		talk 1
		choice 2
		{
			setQuestProgress P_STOLENART_STARTED
			talk 3
			talk 4
			end2
		}
		escape choice 5
			end2
		showChoices
	}

	dialog end
	{
		if haveQuestItem
		{
			choice 0
			{
				setQuestProgress P_STOLENART_FINISHED
				talk 1
				end2
			}
		}
		else if questProgress == P_STOLENART_ON_TIMEOUT
		{
			setQuestProgress P_STOLENART_TIMEOUT
			talk 2
			talk 3
			talk 4
			end2
		}
		end
	}

	code
	{
		Location@ startLoc;
		Location@ targetLoc;
		Item@ item;
		UnitGroup@ group;
		int st, atLevel;
		bool spawned;

		void Startup()
		{
			@startLoc = Level::location;
			@item = ItemList::GetRandomItem("artifacts");
			switch(Rand() % 6)
			{
			case 0:
				@group = UnitGroup::Get("bandits");
				break;
			case 1:
				@group = UnitGroup::Get("orcs");
				break;
			case 2:
				@group = UnitGroup::Get("goblins");
				break;
			case 3:
			case 4:
				@group = UnitGroup::Get("mages");
				break;
			case 5:
				@group = UnitGroup::Get("evil");
				break;
			}
			spawned = false;
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_STOLENART_STARTED:
				{
					@item = item.QuestCopy(quest);

					@targetLoc = World::GetRandomSpawnLocation(World::pos, group);
					targetLoc.SetKnown();
					@targetLoc.activeQuest = quest;
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
					atLevel = targetLoc.GetRandomLevel();
					st = targetLoc.st;

					target.AddDialog(quest, "end");
					target.temporary = false;

					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
					quest.SetTimeout(60);
				}
				break;
			case P_STOLENART_FINISHED:
				{
					int reward = GetReward();
					Team::AddReward(reward, reward * 3);

					target.AddItem(item);
					pc.unit.RemoveItem(item);
					target.temporary = true;

					if(targetLoc !is null && targetLoc.activeQuest is quest)
						@targetLoc.activeQuest = null;

					quest.AddEntry(TEXT(3));
					quest.SetCompleted();
				}
				break;
			case P_STOLENART_TIMEOUT:
				{
					target.temporary = true;

					quest.AddEntry(TEXT(4));
					quest.SetFailed();
				}
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				if(Level::dungeonLevel == atLevel)
				{
					e.onEnter.location.RemoveEventHandler(quest);
					UnitData@ leader = group.GetLeader(st);
					Unit@ unit;
					if(Level::IsOutside())
						@unit = Level::SpawnUnitNearLocation(leader, Level::GetSpawnCenter(), 2.0f, -3);
					else
						@unit = Level::SpawnUnit(Level::GetFarRoom(), leader, -3);
					unit.AddItem(item);
					spawned = true;
					DevInfo(Format("Spawned quest unit '{0}' at {1};{2}.", unit.data.id, unit.pos.x, unit.pos.z));
				}
			}
			else if(e.event == EVENT_TIMEOUT)
			{
				if(spawned)
					targetLoc.GetLocationPart(atLevel).RemoveItemFromUnit(item);
				else
					targetLoc.RemoveEventHandler(quest);
				@targetLoc.activeQuest = null;
				@targetLoc = null;
				quest.AddEntry(TEXT(5));
				progress = P_STOLENART_ON_TIMEOUT;
			}
		}

		int GetReward()
		{
			return Quest::CalculateReward(st, Int2(5, 15), Int2(2000, 6000));
		}

		void OnUpgrade(Vars@ vars)
		{
			@item = vars["item"];
			@group = vars["group"];
			@startLoc = vars["startLoc"];
			@targetLoc = vars["targetLoc"];
			int startTime = vars["startTime"];
			st = vars["st"];
			atLevel = vars["atLevel"];
			spawned = vars["done"];

			if(progress != P_STOLENART_NONE)
				@item = item.QuestCopy(quest);

			if(quest.state != Q_STARTED)
			{
				@targetLoc = null;
				return;
			}

			startLoc.FindQuestUnit(quest).AddDialog(quest, "end");

			int days = 60 + startTime - World::worldtime;
			if(days > 0)
				quest.SetTimeout(days);
			else if(progress == P_STOLENART_STARTED)
			{
				progress = P_STOLENART_ON_TIMEOUT;
				if(targetLoc !is null)
				{
					@targetLoc.activeQuest = null;
					@targetLoc = null;
				}
			}

			if(progress == P_STOLENART_STARTED)
			{
				if(!spawned)
					targetLoc.AddEventHandler(quest, EVENT_ENTER);
				@targetLoc.activeQuest = quest;
			}
		}
	}
}

//=============================================================================
// ALCHEMIST APPRENTICE - unique quest given by alchemist
//=============================================================================
quest alchemistApprentice
{
	type unique
	progress {
		P_ALCH_NONE
		P_ALCH_ACCEPTED
		P_ALCH_JOINED
		P_ALCH_REFUSED
		P_ALCH_ALL_PICKED
		P_ALCH_ALL_PICKED_AND_TALKED
		P_ALCH_ALL_PICKED_MANUALLY
		P_ALCH_FINISHED
		P_ALCH_FAILED
	}

	//-------------------------------------
	// dialogs
	dialog alchemist {
		if questProgress between P_ALCH_ACCEPTED and P_ALCH_ALL_PICKED_MANUALLY
		{
			if once
			{
				talk 11
				doOnce
			}
			if questProgress between P_ALCH_ALL_PICKED and P_ALCH_ALL_PICKED_MANUALLY
			{
				if script "Team::HaveItem(herb)"
				{
					choice 12
					{
						setQuestProgress P_ALCH_FINISHED
						talk 14
						if script "alive"
						{
							talk 16
							script "pc.unit.AddTeamItem(Item::Get(\"p_hp2\"), 5);"
						}
						else
							talk 17
						restart
					}
				}
				else
				{
					choice 13
					{
						setQuestProgress P_ALCH_FAILED
						talk 15
						restart
					}
				}
			}
		}
		else
		{
			if once
			{
				talk 0
				doOnce
			}
			choice 1
			{
				talk 2
				talk 3
				talk 4
				choice 5
				{
					talk 7
					setQuestProgress P_ALCH_ACCEPTED
					talk 8
					talk 9
					talk 10
					restart
				}
				choice 6
				{
					talk 18
					restart
				}
				showChoices
			}
		}
		end
	}

	dialog xwokloiz {
		if questProgress P_ALCH_ACCEPTED
		{
			script "target.knownName = true;"
			talk 0
			talk 1
			talk 2
			choice 3
			{
				setQuestProgress P_ALCH_JOINED
				talk 5
				end
			}
			choice 4
			{
				setQuestProgress P_ALCH_REFUSED
				talk 6
				end
			}
			showChoices
		}
		else if questProgress P_ALCH_REFUSED
		{
			talk 7
			choice 3
			{
				setQuestProgress P_ALCH_JOINED
				talk 5
				end
			}
			choice 4
			{
				talk 6
				end
			}
			showChoices
		}
		else if questProgress P_ALCH_JOINED
		{
			talk 8
			end
		}
		else if questProgress P_ALCH_ALL_PICKED_MANUALLY
		{
			talk 9
			end
		}
		else if questProgress P_ALCH_ALL_PICKED
		{
			talk 10
			setQuestProgress P_ALCH_ALL_PICKED_AND_TALKED
			talk 11
			talk 12
			end
		}
		else
		{
			talk 12
			end
		}
	}
	
	// pre V_0_20
	alias {
		lastItem last_item
		lastPos last_pos
	}
	
	//-------------------------------------
	// quest code
	code {
		Location@ city;
		Location@ forest;
		Item@ herb;
		GroundItem@ lastItem;
		Vec3 lastPos;
		bool alive;

		void Startup()
		{
			@city = World::GetRandomSettlementWithBuilding("alchemist");
			city.AddEventHandler(quest, EVENT_ENTER);
			@herb = Item::Get("alchemist_herb");
			quest.AddRumor(TEXT(11));
			DevInfo(Format("Quest 'Alchemist apprentice' - {0}.", city.name));
			alive = true;
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				e.onEnter.location.RemoveEventHandler(quest);
				if(progress == P_ALCH_NONE)
				{
					Unit@ u = Level::FindUnit(UnitData::Get("alchemist"));
					u.AddDialog(quest, "alchemist");
				}
				else if(progress == P_ALCH_ACCEPTED)
				{
					Level::SpawnItemRandomly(herb, Random(5, 7));
					Unit@ enemy = Level::GetNearestEnemy(Team::leader);
					Unit@ u = Level::SpawnUnitNearLocation(UnitData::Get("xwokloiz"), enemy.pos, 5);
					u.OrderEscapeToUnit(Team::leader)
						.ThenAutoTalk();
					u.AddEventHandler(quest, EVENT_DIE);
					forest.AddEventHandler(quest, EVENT_PICKUP);
					quest.RemoveRumor();
				}
			}
			else if(e.event == EVENT_UPDATE)
			{
				Unit@ me = e.onUpdate.unit;
				if(lastItem is null)
				{
					@lastItem = Level::FindNearestItem(herb, me.pos);
					if(lastItem !is null)
					{
						// move to next herb
						me.OrderMove(lastItem.pos)
							.WithMoveType(MOVE_RUN_WHEN_NEAR_TEAM);
					}
				}
				else if(lastItem.pos != lastPos)
				{
					float dist = Vec3::Distance(me.pos, lastItem.pos);
					if(dist < 2)
					{
						me.Talk(TEXT(9), 2);
						me.OrderLookAt(lastItem.pos)
							.WithTimer(1);
						lastPos = lastItem.pos;
					}
				}
			}
			else if(e.event == EVENT_PICKUP)
			{
				if(e.onPickup.item is herb)
				{
					if(lastItem is e.onPickup.groundItem)
						@lastItem = null;
					GroundItem@ item = Level::FindItem(herb);
					if(item is null)
					{
						// all herbs picked
						Unit@ u = Level::FindUnit(UnitData::Get("xwokloiz"));
						if(progress == P_ALCH_JOINED)
						{
							progress = P_ALCH_ALL_PICKED;
							u.OrderAutoTalk();
							u.RemoveEventHandler(quest);
						}
						else
						{
							progress = P_ALCH_ALL_PICKED_MANUALLY;
							u.OrderLeave();
						}
						quest.AddEntry(TEXT(6));
						forest.RemoveEventHandler(quest);
					}
				}
			}
			else if(e.event == EVENT_DIE)
			{
				e.onDie.unit.RemoveEventHandler(quest);
				alive = false;
				quest.AddEntry(TEXT(10));
			}
		}

		void SetProgress(int prevProgress)
		{
			switch(progress)
			{
			case P_ALCH_ACCEPTED:
				@forest = World::GetClosestLocation(L_OUTSIDE, city.pos, FOREST);
				forest.st = 9;
				forest.reset = true;
				@forest.activeQuest = quest;
				forest.AddEventHandler(quest, EVENT_ENTER);
				forest.SetKnown();
				quest.SetStarted(TEXT(0));
				quest.AddEntry(TEXT(1));
				quest.AddEntry(TEXT(2));
				break;
			case P_ALCH_REFUSED:
				quest.AddEntry(TEXT(3));
				target.OrderClear();
				break;
			case P_ALCH_JOINED:
				if(prevProgress == P_ALCH_REFUSED)
					quest.AddEntry(TEXT(5));
				else
					quest.AddEntry(TEXT(4));
				target.AddEventHandler(quest, EVENT_UPDATE);
				target.OrderClear();
				break;
			case P_ALCH_ALL_PICKED_AND_TALKED:
				pc.unit.AddTeamItem(herb);
				target.RemoveEventHandler(quest);
				target.RemoveItem(herb);
				target.OrderLeave();
				break;
			case P_ALCH_FINISHED:
				{
					quest.AddEntry(TEXT(7));
					quest.SetCompleted();
					uint count = Team::RemoveItem(herb, 0);
					Team::AddReward(500 * count, 7500);
					@forest.activeQuest = null;
				}
				break;
			case P_ALCH_FAILED:
				quest.AddEntry(TEXT(8));
				quest.SetFailed();
				@forest.activeQuest = null;
				break;
			}
		}
	}
}

//=============================================================================
// MAIN STORY QUEST
//=============================================================================
quest main
{
	type unique
	flags dontCount
	progress {
		P_MAIN_NONE
		P_MAIN_TALKED_TRAINER
		P_MAIN_START
		P_MAIN_TALKED_SOLTYS
		P_MAIN_ATTACKED
		P_MAIN_TALKED_SOLTYS2
		P_MAIN_TALKED_CLERIC
		P_MAIN_TALKED_CLERIC_HERO
		P_MAIN_TALKED_CLERIC_HERO2
		P_MAIN_CLERIC_RETURNED
		P_MAIN_CLERIC_RETURNED_TALKED
		P_MAIN_CLERIC_IN_VILLAGE
		P_MAIN_CLERIC_GO_TO_VILLAGES
	}

	dialog trainer {
		if questProgress == P_MAIN_NONE
		{
			talk 0
			talk 1
			setQuestProgress P_MAIN_TALKED_TRAINER
			end
		}
		talk 2
		choice 3
		{
			if script "Team::size < 4"
			{
				talk 6
				special "select_hero"
				escape choice 7
					end
				showChoices
			}
			else
			{
				talk 5
				end
			}
		}
		escape choice 4
			end
		showChoices
	}

	dialog messenger {
		if questProgress == P_MAIN_TALKED_TRAINER
		{
			talk 0
			talk 1
			setQuestProgress P_MAIN_START
			talk 2
			talk 3
			talk 4
			talk 5
			end
		}
		talk 6
		end
	}

	dialog soltys {
		if once
			talk 0
		choice 1
		{
			switch questProgress
			{
			case P_MAIN_START
				talk 2
				talk 3
				setQuestProgress P_MAIN_TALKED_SOLTYS
				talk 4
			case P_MAIN_TALKED_SOLTYS
				talk 5
			case P_MAIN_ATTACKED
				talk 6
				talk 7
				setQuestProgress P_MAIN_TALKED_SOLTYS2
				talk 8
				talk 9
			case default
				if questProgress < P_MAIN_CLERIC_IN_VILLAGE
					talk 10
				else
					talk 11
			}
			restart
		}
		end
	}

	dialog ill_villager {
		talk 0
		if questProgress == P_MAIN_TALKED_SOLTYS
		if script "!target.vars.IsSet(\"talked\")"
		{
			choice 1
			{
				script "counter++; Dialog::var = counter; target.vars[\"talked\"] = true;"
				switch var
				{
				case 1
					talk 3
				case 2
					talk 4
				case 3
					talk 5
					talk 6
				case 4
					talk 7
					talk 8
				case 5
					talk 9
					setQuestProgress P_MAIN_ATTACKED
				}
				end
			}
			escape choice 2
				end
			showChoices
		}
		end
	}

	dialog cleric_seller {
		choice 0
		{
			talk 1
			setQuestProgress P_MAIN_TALKED_CLERIC
			talk 2
			talk 3
			talk 4
			restart
		}
		end
	}

	dialog cleric {
		switch questProgress
		{
		case P_MAIN_TALKED_CLERIC
			talk 0
			talk 1
			talk 2
			setQuestProgress P_MAIN_TALKED_CLERIC_HERO
			talk 3
			restart
		case P_MAIN_TALKED_CLERIC_HERO
			talk 4
			talk 5
			setQuestProgress P_MAIN_TALKED_CLERIC_HERO2
			talk 6
		case P_MAIN_TALKED_CLERIC_HERO2
			talk 7
		case P_MAIN_CLERIC_RETURNED
			setQuestProgress P_MAIN_CLERIC_RETURNED_TALKED
			talk 9
			talk 10
		case P_MAIN_CLERIC_RETURNED_TALKED
			talk 9
			talk 10
		case P_MAIN_CLERIC_IN_VILLAGE
			talk 11
			talk 12
			talk 13
			setQuestProgress P_MAIN_CLERIC_GO_TO_VILLAGES
			talk 14
			talk 15
		case P_MAIN_CLERIC_GO_TO_VILLAGES
			if script "pc.unit.HaveItem(Item::Get(\"book_q_journal\")) && Quest::Find(\"mainVillage1\").progress == P_MAIN_V1_READ"
			{
				choice 19
				{
					doOnce
					talk 20
					script "Quest::Find(\"mainVillage1\").progress = P_MAIN_V1_DONE; ++counter;"
					talk 21
					restart
				}
			}
			if script "pc.unit.HaveItem(Item::Get(\"q_yellow_crystal\")) && Quest::Find(\"mainVillage2\").progress == P_MAIN_V2_CLEARED_PICKED"
			{
				choice 22
				{
					doOnce
					talk 23
					script "Quest::Find(\"mainVillage2\").progress = P_MAIN_V2_DONE; ++counter;"
					talk 21
					restart
				}
			}
			if script "pc.unit.HaveItem(Item::Get(\"q_yellow_herbs\")) && Quest::Find(\"mainVillage3\").progress == P_MAIN_V3_CLEARED_PICKED"
			{
				choice 26
				{
					doOnce
					talk 27
					script "Quest::Find(\"mainVillage3\").progress = P_MAIN_V3_DONE; ++counter;"
					talk 21
					restart
				}
			}
			if script "Quest::Find(\"mainVillage4\").progress == P_MAIN_V4_LEAVE"
			{
				choice 28
				{
					doOnce
					talk 29
					script "Quest::Find(\"mainVillage4\").progress = P_MAIN_V4_DONE; ++counter;"
					talk 21
					restart
				}
			}
			if haveItem q_infected_organ
			{
				choice 24
				{
					doOnce
					script "int count = pc.unit.RemoveItem(Item::Get(\"q_infected_organ\"), 0); Team::AddExp(count * 100);"
					talk 25
					restart
				}
			}
			if once
			{
				if choices == 0
				{
					if script "counter == 4"
						talk 30
					else
						talk 16
				}
				else
					talk 17
			}
			else if choices == 0
			{
				if script "counter == 4"
					talk 30
				else
					talk 18
			}
		}
		
		if choices > 0
		{
			escape choice 8
				end2
			showChoices
		}
		end2
	}
	
	// pre V_0_20
	alias {
		shrineLoc shrine_loc
	}
	
	code {
		Location@ village;
		Location@ shrineLoc;
		Location@ dungeon;
		int counter;
		Unit@ cleric;
		array<Location@> villages;

		void Startup()
		{
			Vec2 pos = World::FindPlace(World::size/2, 64, true);
			Location@ academy = World::CreateLocation(L_OUTSIDE, pos, ACADEMY);
			@academy.activeQuest = quest;
			@academy.group = UnitGroup::empty;
			academy.AddEventHandler(quest, EVENT_ENTER);
			World::SetStartLocation(academy);
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				if(Level::location is dungeon)
				{
					if(Level::dungeonLevel == 0)
					{
						// find room for cleric
						array<Room@> path = Level::FindPath(Level::GetRoom(ROOM_ENTRY_PREV), Level::GetRoom(ROOM_ENTRY_NEXT));
						uint targetDepth = 0;
						for(uint len = path.length(), i = len*2/3; i<len; ++i)
						{
							if(path[i].target != ROOM_CORRIDOR)
							{
								targetDepth = i;
								break;
							}
						}
						Room@ targetRoom = path[targetDepth];

						// kill units on path
						Unit@ player = Team::leader;
						bool skip = false;
						for(uint i=0; i<targetDepth; ++i)
						{
							array<Unit@> units = Level::GetUnits(path[i]);
							for(uint j=0; j<units.length(); ++j)
							{
								Unit@ u = units[j];
								if(u.IsEnemy(player))
								{
									if(skip || Rand() % 2 == 0)
									{
										u.Kill();
										skip = false;
									}
									else
										skip = true;
								}
							}
						}
						

						// spawn dead guards
						UnitData@ guard = UnitData::Get("guard");
						Unit@ uGuard = Level::SpawnUnit(targetRoom, guard);
						uGuard.Kill();
						@uGuard = Level::SpawnUnit(path[targetDepth == 0 ? 0 : targetDepth - 1], guard);
						uGuard.Kill();

						// spawn cleric
						Vec3 pos = Level::FindSpawnPos(targetRoom, cleric);
						cleric.MoveToLocation(Level::location.locPart, pos);
						cleric.AddDialog(quest, "cleric");
						cleric.dontAttack = true;
						cleric.OrderAutoTalk();
						
						// kill nearby units
						array<Unit@> units = Level::GetNearbyUnits(cleric.pos, 20);
						for(uint j=0; j<units.length(); ++j)
						{
							Unit@ u = units[j];
							if(u.IsEnemy(player) && Level::CanSee(cleric, u))
								u.Kill();
						}
					}
					else
					{
						Item@ book = Item::Get("book_q_cleric");
						Room@ room = Level::GetRoom(ROOM_TREASURY);
						Object@ obj = Level::FindObject(room, BaseObject::Get("book_holder"));
						Level::SpawnItem(book, obj);
						e.onEnter.location.RemoveEventHandler(quest, EVENT_ENTER);
					}
				}
				else
				{
					e.onEnter.location.RemoveEventHandler(quest, EVENT_ENTER);
					switch(progress)
					{
					case P_MAIN_NONE:
						{
							Unit@ u = Level::FindUnit(UnitData::Get("q_main_academy"));
							Team::Warp(u.pos - Vec3(0,0,1.5), u.pos);
							if(!Cutscene::ShouldSkip())
							{
								Cutscene::Start();
								Cutscene::Image("cutscene_plague.jpg", 23);
								Cutscene::Image("cutscene_academy.jpg", 11);
								for(int i=0; i<6; ++i)
									Cutscene::Text(TEXT(i), 5);
								Cutscene::End();
							}
							u.OrderAutoTalk(true);
						}
						break;
					case P_MAIN_START:
						{
							Unit@ u = Level::FindUnit(UnitData::Get("soltys"));
							u.AddDialog(quest, "soltys");

							UnitData@ ill = UnitData::Get("q_main_ill_villager");
							BuildingGroup@ group = BuildingGroup::Get("cottage");
							for(int i=0; i<5; ++i)
							{
								CityBuilding@ building = Level::GetRandomBuilding(group);
								Unit@ spawned = Level::SpawnUnitNearLocation(ill, building.unitPos);
								spawned.RotateTo(building.rot);
							}
						}
						break;
					case P_MAIN_TALKED_SOLTYS2:
						{
							Unit@ u = Level::FindUnit(UnitData::Get("cleric_seller"));
							u.AddDialog(quest, "cleric_seller");
						}
						break;
					case P_MAIN_CLERIC_IN_VILLAGE:
						{
							LocationPart@ locPart = Level::location.GetBuildingLocationPart("hall");
							Vec3 pos = Level::FindSpawnPos(locPart, cleric);
							cleric.MoveToLocation(locPart, pos);
							cleric.OrderWait();
						}
						break;
					}
				}
			}
			else if(e.event == EVENT_UPDATE)
			{
				if(Level::location is shrineLoc)
				{
					Unit@ me = e.onUpdate.unit;
					Unit@ target = Level::FindUnit(UnitData::Get("cleric_seller"));
					if(Vec3::Distance(me.pos, target.pos) < 10)
					{
						progress = P_MAIN_CLERIC_RETURNED;
						Team::RemoveMember(me);
						me.OrderMove(target.pos)
							.WithRange(2)
							.ThenAutoTalk();
						me.RemoveEventHandler(quest);
					}
				}
			}
			else if(e.event == EVENT_GENERATE)
			{
				if(Level::dungeonLevel == 0 && e.onGenerate.stage == 0)
				{
					e.onGenerate.mapSettings.prevEntryLoc = ENTRY_BORDER;
					e.onGenerate.mapSettings.nextEntryLoc = ENTRY_FAR_FROM_PREV;
				}
				else if(Level::dungeonLevel == 1 && e.onGenerate.stage == 1)
				{
					Room@ room = Level::GetRoom(ROOM_TREASURY);
					@room.type = RoomType::Get("cryptLibrary");
					Level::location.RemoveEventHandler(quest, EVENT_GENERATE);
				}
			}
			else if(e.event == EVENT_TIMEOUT)
				progress = P_MAIN_CLERIC_IN_VILLAGE;
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_MAIN_TALKED_TRAINER:
				{
					Unit@ u = Level::SpawnUnitNearLocation(UnitData::Get("q_main_messenger"), Team::leader.pos, 4);
					u.RotateTo(Team::leader.pos);
					u.OrderAutoTalk(true);
				}
				break;
			case P_MAIN_START:
				{
					@village = World::GetClosestLocation(L_CITY, World::pos, VILLAGE);
					village.AddEventHandler(quest, EVENT_ENTER);
					target.OrderLeave();
					quest.SetStarted(TEXT(6));
					quest.AddEntry(TEXT(7));
					quest.AddEntry(TEXT(8));
				}
				break;
			case P_MAIN_TALKED_SOLTYS:
				quest.AddEntry(TEXT(9));
				counter = 0;
				break;
			case P_MAIN_ATTACKED:
				quest.AddEntry(TEXT(10));
				target.ChangeBase(UnitData::Get("q_main_ill_villager_attack"));
				break;
			case P_MAIN_TALKED_SOLTYS2:
				@shrineLoc = World::GetRandomSettlementWithBuilding("shrine");
				shrineLoc.AddEventHandler(quest, EVENT_ENTER);
				quest.AddEntry(TEXT(11));
				break;
			case P_MAIN_TALKED_CLERIC:
				{
					target.RemoveDialog(quest);

					@cleric = World::CreateUnit(UnitData::Get("hero_cleric"), 8);

					Vec2 pos = World::FindPlace(Level::location.pos, 80, 100);
					@dungeon = World::CreateLocation(L_DUNGEON, pos, HERO_CRYPT, 2);
					@dungeon.activeQuest = quest;
					@dungeon.group = UnitGroup::Get("undead");
					dungeon.st = 8;
					dungeon.SetKnown();
					dungeon.AddEventHandler(quest, EVENT_GENERATE);
					dungeon.AddEventHandler(quest, EVENT_ENTER);

					quest.AddEntry(TEXT(12));
				}
				break;
			case P_MAIN_TALKED_CLERIC_HERO:
				{
					target.dontAttack = false;
					target.knownName = true;
					target.AddEventHandler(quest, EVENT_UPDATE);
					Team::AddMember(target, HERO_FREE);
					quest.AddEntry(TEXT(13));
				}
				break;
			case P_MAIN_TALKED_CLERIC_HERO2:
				{
					Vars vars;
					vars["cleric"] = cleric;
					vars["city"] = shrineLoc;
					Quest::Find("sideCleric").Start(vars);
				}
				break;
			case P_MAIN_CLERIC_RETURNED_TALKED:
				{
					int days = 10;
					if(Quest::Find("sideCleric").state == Q_COMPLETED)
						days = 5;
					quest.SetTimeout(days);
					quest.AddEntry(TEXT(14));
				}
				break;
			case P_MAIN_CLERIC_IN_VILLAGE:
				if(Level::location is village)
				{
					LocationPart@ locPart = Level::location.GetBuildingLocationPart("hall");
					Vec3 pos = Level::FindSpawnPos(locPart, cleric);
					cleric.MoveToLocation(locPart, pos);
					cleric.OrderWait();
				}
				else
				{
					cleric.MoveOffscreen();
					village.AddEventHandler(quest, EVENT_ENTER);
				}
				quest.AddEntry(TEXT(15));
				break;
			case P_MAIN_CLERIC_GO_TO_VILLAGES:
				{
					Vars vars;
					vars["cleric"] = cleric;
					array<int> quests = { 1, 2, 3, 4 };
					quests.shuffle();
					villages.resize(4);
					
					for(int i = 0; i < 4; ++i)
					{
						vars["index"] = i;
						Quest::Find("mainVillage" + quests[i]).Start(vars);
						@villages[i] = vars["village"];
					}
					
					quest.AddEntry(TEXT(16));
					counter = 0;
				}
				break;
			}
		}
	}
}

//=============================================================================
// SIDE QUEST - cleric
//=============================================================================
quest sideCleric
{
	type unique
	progress {
		P_CLERIC_NONE
		P_CLERIC_START
		P_CLERIC_PICKED
		P_CLERIC_END
	}

	dialog end {
		if haveItem book_q_cleric
			choice 0
			{
				talk 1
				setQuestProgress P_CLERIC_END
				talk 2
				end2
			}
		end
	}

	code {
		Unit@ cleric;
		Location@ city;
		Location@ dungeon;
		Item@ book;

		void Startup(Vars@ vars)
		{
			@cleric = vars["cleric"];
			@city = vars["city"];
			progress = P_CLERIC_START;
		}

		void SetProgress()
		{
			switch(progress)
			{
			case P_CLERIC_START:
				@book = Item::Get("book_q_cleric");
				@dungeon = Level::location;
				quest.SetStarted(TEXT(0));
				quest.AddEntry(TEXT(1));
				quest.AddEntry(TEXT(2));
				target.AddDialog(quest, "end", 1);
				@Level::location.activeQuest = quest;
				Level::location.AddEventHandler(quest, EVENT_PICKUP);
				break;
			case P_CLERIC_PICKED:
				quest.AddEntry(TEXT(3));
				@Level::location.activeQuest = null;
				break;
			case P_CLERIC_END:
				quest.AddEntry(TEXT(4));
				quest.SetCompleted();
				pc.unit.RemoveItem(book);
				Team::AddReward(4000, 12000);
				break;
			}
		}

		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_PICKUP && e.onPickup.item is book)
			{
				progress = P_CLERIC_PICKED;
				Level::location.RemoveEventHandler(quest);
			}
		}
	}
}

//=============================================================================
// UNIQUE HUNTERS QUEST - kill boss wolf
//=============================================================================
quest direWolf
{
	type unique
	progress {
		P_WOLF_NONE
		P_WOLF_STARTED
		P_WOLF_KILLED
		P_WOLF_COMPLETE
	}

	dialog hunter {
		if questProgress == P_WOLF_NONE
		{
			choice 0
			{
				setQuestProgress P_WOLF_STARTED
				talk 1
				talk 2
				talk 3
				end
			}
		}
		else if questProgress == P_WOLF_KILLED
		{
			setQuestProgress P_WOLF_COMPLETE
			doOnce
			talk 4
			end
		}
		end
	}
	
	code {
		Location@ startLoc;
		Location@ forest;
		
		void Startup()
		{
			@startLoc = World::GetLocationByType(L_OUTSIDE, HUNTERS_CAMP);
			startLoc.AddEventHandler(quest, EVENT_ENTER);
		}
		
		void SetProgress()
		{
			switch(progress)
			{
			case P_WOLF_STARTED:
				@forest = World::GetClosestLocation(L_OUTSIDE, startLoc.pos, FOREST);
				@forest.activeQuest = quest;
				forest.AddEventHandler(quest, EVENT_ENTER);
				forest.SetKnown();
				forest.reset = true;
				if(forest.st < 5)
					forest.st = 5;

				quest.SetStarted(TEXT(0));
				quest.AddEntry(TEXT(1));
				quest.AddEntry(TEXT(2));
				break;
			case P_WOLF_KILLED:
				@forest.activeQuest = null;
				quest.AddEntry(TEXT(3));
				break;
			case P_WOLF_COMPLETE:
				target.RemoveDialog(quest);
				quest.AddEntry(TEXT(4));
				quest.SetCompleted();
				Team::AddReward(5000, 15000);
				break;
			}
		}
		
		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
			{
				if(progress == P_WOLF_NONE)
				{
					// add dialog to hunters leader
					UnitData@ ud = UnitData::Get("hunter_leader");
					Unit@ unit = Level::FindUnit(ud);
					unit.AddDialog(quest, "hunter");
				}
				else
				{
					// spawn dire wolf
					UnitData@ ud = UnitData::Get("dire_wolf");
					Unit@ unit = Level::SpawnUnitNearLocation(ud, Vec3(128, 0, 128));
					unit.AddEventHandler(quest, EVENT_DIE);
				}
				e.onEnter.location.RemoveEventHandler(quest, EVENT_ENTER);
			}
			else if(e.event == EVENT_DIE)
			{
				e.onDie.unit.RemoveEventHandler(quest, EVENT_DIE);
				progress = P_WOLF_KILLED;
			}
		}
		
		void OnUpgrade(Vars@ vars)
		{
			@startLoc = vars["startLoc"];
			@forest = vars["forest"];
			
			if(progress != P_WOLF_COMPLETE)
			{
				Unit@ unit = startLoc.GetUnit(UnitData::Get("hunter_leader"));
				if(unit is null)
					startLoc.AddEventHandler(quest, EVENT_ENTER);
				else
					unit.AddDialog(quest, "hunter");
			}
			
			if(progress == P_WOLF_STARTED)
			{
				Unit@ unit = forest.GetUnit(UnitData::Get("dire_wolf"));
				if(unit is null)
					forest.AddEventHandler(quest, EVENT_ENTER);
				else
					unit.AddEventHandler(quest, EVENT_DIE);
				@forest.activeQuest = quest;
			}
		}
	}
}

//=============================================================================
// MAIN QUEST - VILLAGE 1 (empty)
//=============================================================================
quest mainVillage1
{
	type unique
	flags recreate
	progress {
		P_MAIN_V1_NONE
		P_MAIN_V1_START
		P_MAIN_V1_ENTER
		P_MAIN_V1_READ
		P_MAIN_V1_DONE
	}
	
	code {
		Unit@ cleric;
		Location@ village;
		int locQuadrant;
		
		void Startup(Vars@ vars)
		{
			@cleric = vars["cleric"];
			locQuadrant = vars["index"];
			progress = P_MAIN_V1_START;
			vars["village"] = village;
		}
		
		void SetProgress()
		{
			switch(progress)
			{
			case P_MAIN_V1_START:
				{
					@village = World::CreateLocation(L_CITY, GetVillagePos(locQuadrant), VILLAGE_EMPTY);
					@village.activeQuest = quest;
					village.SetKnown();
					village.AddEventHandler(quest, EVENT_ENTER);
					
					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
				}
				break;
			case P_MAIN_V1_ENTER:
				{
					village.image = LI_VILLAGE_DESTROYED;
					village.RemoveEventHandler(quest, EVENT_ENTER);
					quest.AddEntry(TEXT(3));
					LocationPart@ part = village.GetBuildingLocationPart("hall");
					Item@ item = Item::Get("book_q_journal");
					Level::SpawnItem(part, item);
					Quest::AddItemEventHandler(quest, item);
				}
				break;
			case P_MAIN_V1_READ:
				Quest::RemoveItemEventHandler(quest, Item::Get("book_q_journal"));
				quest.AddEntry(TEXT(4));
				break;
			case P_MAIN_V1_DONE:
				quest.AddEntry(TEXT(5));
				quest.SetCompleted();
				pc.unit.RemoveItem(Item::Get("book_q_journal"));
				Team::AddReward(1000, 3000);
				World::AddNews(TEXT(6));
				break;
			}
		}
		
		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
				progress = P_MAIN_V1_ENTER;
			else
				progress = P_MAIN_V1_READ;
		}
	}
}

//=============================================================================
// MAIN QUEST - VILLAGE 2 (enemies)
//=============================================================================
quest mainVillage2
{
	type unique
	flags recreate
	progress {
		P_MAIN_V2_NONE
		P_MAIN_V2_START
		P_MAIN_V2_ENTER
		P_MAIN_V2_CLEARED
		P_MAIN_V2_PICKED
		P_MAIN_V2_CLEARED_PICKED
		P_MAIN_V2_DONE
	}
	
	code {
		Unit@ cleric;
		Location@ village;
		int locQuadrant;
		
		void Startup(Vars@ vars)
		{
			@cleric = vars["cleric"];
			locQuadrant = vars["index"];
			progress = P_MAIN_V2_START;
			vars["village"] = village;
		}
		
		void SetProgress()
		{
			switch(progress)
			{
			case P_MAIN_V2_START:
				{
					@village = World::CreateLocation(L_CITY, GetVillagePos(locQuadrant), VILLAGE_DESTROYED);
					@village.activeQuest = quest;
					village.SetKnown();
					village.AddEventHandler(quest, EVENT_ENTER);
					
					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
				}
				break;
			case P_MAIN_V2_ENTER:
				{
					// enemies
					Level::SpawnUnits(UnitGroup::Get("plague"), 10);
					
					// soltys
					LocationPart@ locPart = village.GetBuildingLocationPart("hall");
					Unit@ unit = Level::SpawnUnit(locPart, UnitData::Get("q_main_plague_soltys"));
					unit.AddEventHandler(quest, EVENT_PICKUP);
					
					village.image = LI_VILLAGE_DESTROYED;
					village.RemoveEventHandler(quest, EVENT_ENTER);
					village.AddEventHandler(quest, EVENT_CLEARED);
					quest.AddEntry(TEXT(3));
				}
				break;
			case P_MAIN_V2_CLEARED:
				quest.AddEntry(TEXT(4));
				break;
			case P_MAIN_V2_PICKED:
				quest.AddEntry(TEXT(5));
				break;
			case P_MAIN_V2_CLEARED_PICKED:
				quest.AddEntry(TEXT(6));
				break;
			case P_MAIN_V2_DONE:
				quest.AddEntry(TEXT(7));
				quest.SetCompleted();
				pc.unit.RemoveItem(Item::Get("q_yellow_crystal"));
				Team::AddReward(5000, 15000);
				World::AddNews(TEXT(8));
				break;
			}
		}
		
		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
				progress = P_MAIN_V2_ENTER;
			else if(e.event == EVENT_CLEARED)
			{
				if(progress == P_MAIN_V2_ENTER)
					progress = P_MAIN_V2_CLEARED;
				else if(progress == P_MAIN_V2_PICKED)
					progress = P_MAIN_V2_CLEARED_PICKED;
				village.RemoveEventHandler(quest, EVENT_CLEARED);
			}
			else if(e.event == EVENT_PICKUP)
			{
				if(e.onPickup.item.id == "q_yellow_crystal")
				{
					if(progress == P_MAIN_V2_ENTER)
						progress = P_MAIN_V2_PICKED;
					else if(progress == P_MAIN_V2_CLEARED)
					{
						quest.AddEntry(TEXT(5));
						progress = P_MAIN_V2_CLEARED_PICKED;
					}
					e.onPickup.unit.RemoveEventHandler(quest, EVENT_PICKUP);
				}
			}
		}
	}
}

//=============================================================================
// MAIN QUEST - VILLAGE 3 (enemies + citizens)
//=============================================================================
quest mainVillage3
{
	type unique
	flags recreate
	progress {
		P_MAIN_V3_NONE
		P_MAIN_V3_START
		P_MAIN_V3_ENTER
		P_MAIN_V3_CLEARED
		P_MAIN_V3_PICKED
		P_MAIN_V3_CLEARED_PICKED
		P_MAIN_V3_DONE
	}
	
	dialog villager {
		script "OrderLeave()"
		talk 0
		end2
	}
	
	dialog inn_villager {
		talk 0
		script "InnVillagerTalk()"
		talk 1
		talk 2
		end2
	}
	
	code {
		Unit@ cleric;
		Location@ village;
		int locQuadrant;
		
		void Startup(Vars@ vars)
		{
			@cleric = vars["cleric"];
			locQuadrant = vars["index"];
			progress = P_MAIN_V3_START;
			vars["village"] = village;
		}
		
		void SetProgress()
		{
			switch(progress)
			{
			case P_MAIN_V3_START:
				{
					@village = World::CreateLocation(L_CITY, GetVillagePos(locQuadrant), VILLAGE_DESTROYED2);
					@village.activeQuest = quest;
					village.SetKnown();
					village.AddEventHandler(quest, EVENT_ENTER);
					
					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
				}
				break;
			case P_MAIN_V3_ENTER:
				{
					// enemies
					Level::SpawnUnits(UnitGroup::Get("plague"), 10);
					
					// villages
					Level::SpawnUnits(UnitGroup::Get("plague_villagers"), 3);
					UnitData@ data = UnitData::Get("q_main_villager_def");
					array<Unit@> units = Level::GetUnits();
					for(uint i = 0; i < units.length(); ++i)
					{
						Unit@ unit = units[i];
						if(unit.data is data)
							unit.OrderAutoTalk();
					}
					
					// inn villager
					LocationPart@ locPart = village.GetBuildingLocationPart("inn");
					Unit@ unit = Level::SpawnUnit(locPart, UnitData::Get("q_main_villager_def"));
					unit.AddDialog(quest, "inn_villager");
					unit.OrderAutoTalk();
					
					// alchemist
					CityBuilding@ building = Level::GetBuilding(BuildingGroup::Get("alchemist"));
					@unit = Level::SpawnUnitNearLocation(UnitData::Get("q_main_plague_alchemist"), building.unitPos);
					unit.RotateTo(building.rot);
					unit.AddEventHandler(quest, EVENT_PICKUP);
					
					village.image = LI_VILLAGE_DESTROYED;
					village.RemoveEventHandler(quest, EVENT_ENTER);
					village.AddEventHandler(quest, EVENT_CLEARED);
					quest.AddEntry(TEXT(3));
				}
				break;
			case P_MAIN_V3_CLEARED:
				quest.AddEntry(TEXT(5));
				break;
			case P_MAIN_V3_PICKED:
				quest.AddEntry(TEXT(6));
				break;
			case P_MAIN_V3_CLEARED_PICKED:
				quest.AddEntry(TEXT(7));
				break;
			case P_MAIN_V3_DONE:
				quest.AddEntry(TEXT(8));
				quest.SetCompleted();
				pc.unit.RemoveItem(Item::Get("q_yellow_herbs"));
				Team::AddReward(5000, 15000);
				World::AddNews(TEXT(9));
				break;
			}
		}
		
		void OnEvent(Event@ e)
		{
			if(e.event == EVENT_ENTER)
				progress = P_MAIN_V3_ENTER;
			else if(e.event == EVENT_CLEARED)
			{
				if(progress == P_MAIN_V3_ENTER)
					progress = P_MAIN_V3_CLEARED;
				else if(progress == P_MAIN_V3_PICKED)
					progress = P_MAIN_V3_CLEARED_PICKED;
				village.RemoveEventHandler(quest, EVENT_CLEARED);
			}
			else if(e.event == EVENT_PICKUP)
			{
				if(e.onPickup.item.id == "q_yellow_herbs")
				{
					if(progress == P_MAIN_V3_ENTER)
						progress = P_MAIN_V3_PICKED;
					else if(progress == P_MAIN_V3_CLEARED)
					{
						quest.AddEntry(TEXT(6));
						progress = P_MAIN_V3_CLEARED_PICKED;
					}
					e.onPickup.unit.RemoveEventHandler(quest, EVENT_PICKUP);
				}
			}
		}
		
		void OrderLeave()
		{
			int exp = 0;
			Var@ var = target.vars["leaving"];
			if(var == true)
				return;
			
			var = true;
			exp += 1000;
			target.OrderLeave();
			
			UnitData@ data = UnitData::Get("q_main_villager_def");
			array<Unit@> units = Level::GetNearbyUnits(target.pos, 20);
			for(uint i = 0; i < units.length(); ++i)
			{
				Unit@ unit = units[i];
				if(!(unit is target) && unit.data is data && unit.IsAlive())
				{
					@var = unit.vars["leaving"];
					if(var == true)
						continue;
					var = true;
					exp += 1000;
					unit.OrderLeave();
				}
			}
			
			if(exp > 0)
				Team::AddExp(exp);
		}
		
		void InnVillagerTalk()
		{
			target.vars["leaving"] = true;
			target.RemoveDialog(quest);
			target.OrderLeave();
			Team::AddExp(1000);
			quest.AddEntry(TEXT(4));
		}
	}
}

//=============================================================================
// MAIN QUEST - VILLAGE 4 (old man)
//=============================================================================
quest mainVillage4
{
	type unique
	flags recreate
	progress {
		P_MAIN_V4_NONE
		P_MAIN_V4_START
		P_MAIN_V4_ENTER
		P_MAIN_V4_CLEARED
		P_MAIN_V4_FOLLOW
		P_MAIN_V4_LEAVE
		P_MAIN_V4_DONE
	}
	
	dialog oldman {
		if questProgress >= P_MAIN_V4_LEAVE
		{
			talk 10
			end
		}
		if questProgress == P_MAIN_V4_FOLLOW
		{
			if script "Level::IsSafeSettlement()"
			{
				setQuestProgress P_MAIN_V4_LEAVE
				talk 8
				talk 9
			}
			else
				talk 7
			end
		}
		if script "!talked"
		{
			talk 0
			talk 1
			if questProgress == P_MAIN_V4_CLEARED
			{
				talk 3
				setQuestProgress P_MAIN_V4_FOLLOW
				talk 4
			}
			else
			{
				talk 2
				script "talked = true; quest.AddEntry(TEXT(4));"
			}
		}
		else
		{
			if questProgress == P_MAIN_V4_CLEARED
			{
				talk 6
				talk 3
				setQuestProgress P_MAIN_V4_FOLLOW
				talk 4
			}
			else
				talk 5
		}
		end
	}
	
	code {
		Unit@ cleric;
		Unit@ oldman;
		Location@ village;
		int locQuadrant;
		bool talked;
		
		void Startup(Vars@ vars)
		{
			@cleric = vars["cleric"];
			locQuadrant = vars["index"];
			progress = P_MAIN_V4_START;
			vars["village"] = village;
		}
		
		void SetProgress()
		{
			switch(progress)
			{
			case P_MAIN_V4_START:
				{
					@village = World::CreateLocation(L_CITY, GetVillagePos(locQuadrant), VILLAGE_DESTROYED);
					@village.activeQuest = quest;
					village.SetKnown();
					village.AddEventHandler(quest, EVENT_ENTER);
					
					quest.SetStarted(TEXT(0));
					quest.AddEntry(TEXT(1));
					quest.AddEntry(TEXT(2));
				}
				break;
			case P_MAIN_V4_ENTER:
				{
					// enemies
					UnitGroup@ group = UnitGroup::Get("plague");
					Level::SpawnUnits(group, 10);
					
					// inn people
					LocationPart@ locPart = village.GetBuildingLocationPart("inn");
					@oldman = Level::SpawnUnit(locPart, UnitData::Get("q_main_oldman"));
					oldman.OrderAutoTalk();
					oldman.dontAttack = true;
					Unit@ unit = Level::SpawnUnit(locPart, UnitData::Get("q_main_villager_def"));
					unit.OrderAutoTalk();
					
					// barricade
					CityBuilding@ building = Level::GetBuilding(BuildingGroup::Get("inn"));
					building.canEnter = false;
					Usable@ usable = Level::SpawnUsable(BaseObject::Get("barricade"), building.entryArea.Midpoint(), building.rot);
					usable.AddEventHandler(quest, EVENT_DESTROY);
					
					// units attacking barricade
					for(int i = 0; i < 2; ++i)
					{
						@unit = Level::SpawnUnitNearLocation(group.GetRandom(), usable.pos, 3);
						unit.OrderAttackObject(usable);
					}
					
					village.image = LI_VILLAGE_DESTROYED;
					village.RemoveEventHandler(quest, EVENT_ENTER);
					village.AddEventHandler(quest, EVENT_CLEARED);
					quest.AddEntry(TEXT(3));
				}
				break;
			case P_MAIN_V4_CLEARED:
				quest.AddEntry(TEXT(talked ? 6 : 5));
				village.RemoveEventHandler(quest, EVENT_CLEARED);
				break;
			case P_MAIN_V4_FOLLOW:
				quest.AddEntry(TEXT(7));
				Team::AddMember(oldman, HERO_VISITOR);
				oldman.AddEventHandler(quest, EVENT_ENTER);
				break;
			case P_MAIN_V4_LEAVE:
				quest.AddEntry(TEXT(8));
				quest.AddTimer(1);
				Team::RemoveMember(oldman);
				oldman.OrderGoToInn();
				oldman.RemoveEventHandler(quest, EVENT_ENTER);
				break;
			case P_MAIN_V4_DONE:
				quest.AddEntry(TEXT(9));
				quest.SetCompleted();
				Team::AddReward(5000, 15000);
				World::AddNews(TEXT(10));
				break;
			}
		}
		
		void OnEvent(Event@ e)
		{
			switch(e.event)
			{
			case EVENT_ENTER:
				if(progress == P_MAIN_V4_START)
					progress = P_MAIN_V4_ENTER;
				else if(Level::IsSafeSettlement())
					oldman.OrderAutoTalk();
				break;
			case EVENT_DESTROY:
				{
					CityBuilding@ building = Level::GetBuilding(BuildingGroup::Get("inn"));
					building.canEnter = true;
				}
				break;
			case EVENT_CLEARED:
				progress = P_MAIN_V4_CLEARED;
				break;
			case EVENT_TIMER:
				oldman.MoveOffscreen();
				break;
			}
		}
	}
}

//=============================================================================
// QUEST LISTS
//=============================================================================
questList mayor {
	deliverLetter 3
	deliverParcel 3
	deliverResources 3
	spreadNews 2
	retrievePackage 2
	none 2
}

questList captain {
	rescueCaptive 2
	banditsCollectToll 2
	campNearCity 2
	killAnimals 2
	wanted 2
	none 1
}

questList random {
	findArtifact 1
	lostArtifact 1
	stolenArtifact 1
}

//=============================================================================
// ALIASES
//=============================================================================
// pre V_DEV
alias globalInit global_init
alias deliverLetter deliver_letter
alias deliverResources deliver_resources
alias banditsCollectToll bandits_collect_toll
alias campNearCity camp_near_city
alias killAnimals kill_animals
alias findArtifact find_artifact
alias lostArtifact lost_artifact
alias stolenArtifact stolen_artifact
alias alchemistApprentice alchemist_apprentice
alias sideCleric side_cleric
alias direWolf dire_wolf
alias mainVillage1 main_village1
alias mainVillage2 main_village2
alias mainVillage3 main_village3
alias mainVillage4 main_village4
