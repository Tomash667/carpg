Pozycja w CaRpg:
   Z+
  /|\
   |
   |
   +-----> X+
   
   X - lewo, prawo +
   Y - dó³, góra   +
   Z - ty³, przód  +
   
Mapa (lokacji, œwiata):
 (0,h)--------(w,h)
   |            |
   |            |
   |            |
   |            |
 (0,0)--------(w,0)
 
Obrót w CaRpg:
w radianach
        PI
        /|\
         |
         |
PI/2 <---+---> 3/2 PI
         |
         |
        \|/
         0
Dla zera kierunek jest Z- (w stronê kamery)

NEW ROTATION (NOT USED YET BUT IT WILL BE)
     PI/2 +Z
      /|\
       |
 -X    |    +X
PI <---+---> 0
       |
       |
      \|/
     3/2 PI -Z

SCREEN & 2D DRAWING
(0,0)------------(w,0)
  |      top       |
  |                |
  |                |
  |     bottom     |
(0,h)------------(w,h)


=====================================================================================================
Layout wierzcho-ka dla pixa:
=====================================================================================================
float3 position
float weight
short idx1
short idx2
float3 normal
float2 tex

=====================================================================================================
CollisionObject user pointer wskazuje na Unit*/Usable*/Object*

=====================================================================================================
RENDEROWANIE / RENDER TARGETS (MS = multisampling)
1. Normalne renderowanie (lub z MS) - domyœlny render target, nic nie trzeba robiæ
2. Normalne + glow
	1) Wyrenderuj normalnie scene
	2) RenderTarget = tPostEffect[0]
	3) Renderowanie glow
	4) RenderTarget = tPostEffect[1], Source = tPostEffect[0]
	5) BlurX
	6) RenderTarget = tPostEffect[0], Source = tPostEffect[1]
	7) BlurY
	8) RenderTarget = Default, Source = tPostEffect[0]
	9) Wyrenderowanie glow na normalnej scenie z blendingiem
3. Normalne + glow + MS
	1) Wyrenderuj normalnie scene
	2) RenderTarget = sPostEffect[0]
	3) Renderowanie glow
	4) StretchRect sPostEffect[0] -> tPostEffect[0]
	5) RenderTarget = sPostEffect[1], Source = tPostEffect[0]
	6) BlurX
	7) StretchRect sPostEffect[1] -> tPostEffect[0]
	8) RenderTarget = sPostEffect[0], Source = tPostEffect[0]
	9) BlurY
	10) StretchRect sPostEffect[0] -> tPostEffect[0]
	11) RenderTarget = Default, Source = tPostEffect[0]
	12) Wyrenderowanie glow na normalnej scenie z blendingiem
4. Post effect
	1) RenderTarget = tPostEffect[2]
	2) Wyrenderuj scene
	3) RenderTarget = tPostEffect[0], Source = tPostEffect[1]
	4) Wyrenderuj post effect
	... RenderTarget = tPostEffect[1], Source = tPostEffect[0]
	... Wyrenderuj post effect
	...
	5) Przy ostatnim przebiegu
	6) RenderTarget = Default, Source = tPostEffect[?]
	7) Wyrenderuj post effect
5) Dla MS wygl¹da podobnie tylko ¿e RenderTarget = sPostEffect[?] i trzeba u¿ywaæ StretchRect


=====================================================================================================
MAPA W KAFELKACH
=====================================================================================================

O-----> +X
|
|
|
|/ -Y

MAPA 3D

O-----> +X
|
|
|
|/ -Z


=====================================================================================================
¯YWIO£Y

           Ogieñ
             |
             |
Powietrze ---+--- Ziemia
             |
             |
            Woda
            
POD¯YWIO£Y:
woda - zimno, kwas
powietrze - elektrycznoœæ, trucizna
ziemia - metal


=====================================================================================================
KIERUNEK ZWRACANY PRZEZ angle()
			PI/2
	 3/4PI  /|\
	  |\     |     /| PI/4
		\.   |   ./
		  \. | ./
			\|/
 PI <--------+--------> 0
			/|\
		  /  |  \
		/    |    \
	  |/     |     \|
	5/4 PI  \|/     7/4 PI
           3/2 PI

		   
=====================================================================================================
New multiplayer game
* Enter new location
------------------------------------------------------
  SERVER					|    CLIENT
----------------------------+-------------------------
 ID_STARTUP ->				|
							| LoadingStart(9/4) (second if starting on worldmap)
 ID_WORLD_DATA ->			|
							| Step, ReadWorldData, Step (net_state = 0)
							| <- ID_READY
 ID_PLAYER_START_DATA ->	|
							| Step, ReadPlayerData, Step/LoadResources (second if starting on worldmap; net_state = 1)
							| <- ID_READY
*ID_CHANGE_LEVEL ->			|
 or ID_START (worldmap) ----+--------------------------------------> DONE
							| Step
							| <- ID_SND_RECEIPT_ACKED
 ID_LEVEL_DATA ->			|
							| Step, ReadLevelData, Step
							| <- ID_READY
 ID_PLAYER_DATA	->			|
							| Step, ReadPlayerData, LoadResources
							| <- ID_READY
 ID_START ->				|
                            | DONE
 
=====================================================================================================
odpoczynek u klienta
SERWER		KLIENT
dialog
"rest?"
NCP::Rest --->
			fallback
		<---NC::Rest
Rest()
NCP::EndFallback-->




================================================================
autoexp.dat
Zmiana na wyœwietlanie w debuggerze po¿ytecznych informacji o Unit
type=npc ptr=0xDEADC0DE refid=7 base="warrior" pos=(4,8,15)
dla vector dodaje pole raw members bo mi siê przydaje!

;------------------------------------------------------------------------------
Unit {
	preview (
		#(
			"type=",
			#if ($c.player != 0) ("!!player")
			#elif ($c.hero != 0) ("hero")
			#else ("npc"),
			" ptr=", (void*)&($c),
			" refid=", $c.refid,
			" base=", [$c.data->id,s],
			" pos=(", [$c.pos.x,g], ";", [$c.pos.y,g], ";", [$c.pos.z,g], ")"
		)
	)
}

;------------------------------------------------------------------------------
;  std::vector
;------------------------------------------------------------------------------
std::vector<*>{
	children
	(
		#(
			#([raw members]: [$e,!]),
			#array
			(
				expr :		($e._Myfirst)[$i],
				size :		$e._Mylast-$e._Myfirst
			)
		)
	)
	preview
	(
		#(
			"[", $e._Mylast - $e._Myfirst , "](",
			#array
			(
				expr :	($e._Myfirst)[$i],
				size :	$e._Mylast-$e._Myfirst
			),
			")"
		)
	)
}


=====================================================================================================
przy debugowaniu w windbg
symbols: srv*c:\symbols*http://msdl.microsoft.com/download/symbols
images: c:\symbols
.symopt+ 0x40


=====================================================================================================
http://gamedev.stackexchange.com/questions/14309/how-to-develop-rpg-damage-formulas
Creating formulas like this requires knowledge of elementary mathematical functions - the things you learned about in Algebra and Pre-calculus class.

Once you have those mastered, just ask yourself (replace "value" with "damage," or "health," or "speed" or whatever):

Do you want the value to grow at a constant rate? Use a linear function.
Do you want the value to grow slow at first, but fast later? Use a polynomial or exponential function.
Do you want the value to grow fast at first, and slow down later? Use an nth-root or logarithmic function.
Do you want the value to grow slowly at the start/end but fast in the middle? Or do you want it to grow quickly but still have an upper-bound? Use a sigmoid curve, such as atan or the logistic function.
Do you want the value to oscillate? Use a sin or some other wave.


=====================================================================================================
====== MESSAGE PRIORITIES
=====================================================================================================
IMMEDIATE - client messages to server that require some response (picking character in lobby),
	sending server state when loading game
HIGH - normal messaged
NORMAL - unimportant messaged like chat
